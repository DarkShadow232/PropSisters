<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Property Calendar - PropSisters Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .calendar-day {
            min-height: 100px;
            border: 1px solid #dee2e6;
            position: relative;
        }
        .calendar-day.available {
            background-color: #d4edda;
        }
        .calendar-day.blocked {
            background-color: #f8d7da;
        }
        .calendar-day.today {
            border: 2px solid #007bff;
        }
        .calendar-day.selected {
            background-color: #007bff;
            color: white;
        }
        .price-tag {
            position: absolute;
            bottom: 5px;
            right: 5px;
            font-size: 0.75rem;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 2px 4px;
            border-radius: 3px;
        }
        .booking-info {
            font-size: 0.7rem;
            margin-bottom: 2px;
        }
        .property-selector {
            max-width: 300px;
        }
    </style>
</head>
<body class="bg-light">
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="/admin/dashboard">
                <i class="fas fa-home me-2"></i>PropSisters Admin
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link" href="/admin/dashboard">
                    <i class="fas fa-tachometer-alt me-1"></i>Dashboard
                </a>
                <a class="nav-link" href="/admin/properties">
                    <i class="fas fa-building me-1"></i>Properties
                </a>
                <a class="nav-link" href="/admin/bookings">
                    <i class="fas fa-calendar-check me-1"></i>Bookings
                </a>
                <a class="nav-link active" href="/admin/properties/calendar">
                    <i class="fas fa-calendar me-1"></i>Calendar
                </a>
                <a class="nav-link" href="/logout">
                    <i class="fas fa-sign-out-alt me-1"></i>Logout
                </a>
            </div>
        </div>
    </nav>

    <div class="container-fluid py-4">
        <!-- Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1 class="h3 mb-0">Property Calendar Management</h1>
                        <p class="text-muted mb-0">Manage availability and pricing for properties</p>
                    </div>
                    <div>
                        <button class="btn btn-outline-primary me-2" onclick="refreshCalendar()">
                            <i class="fas fa-sync-alt me-1"></i>Refresh
                        </button>
                        <button class="btn btn-primary" onclick="showBulkUpdateModal()">
                            <i class="fas fa-edit me-1"></i>Bulk Update
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Property Selector -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <label for="propertySelect" class="form-label">Select Property</label>
                        <select class="form-select property-selector" id="propertySelect" onchange="loadPropertyCalendar()">
                            <option value="">Choose a property...</option>
                            <!-- Properties will be loaded here -->
                        </select>
                    </div>
                    <div class="col-md-6">
                        <div class="d-flex align-items-center">
                            <label class="form-label me-3 mb-0">View:</label>
                            <div class="btn-group" role="group">
                                <input type="radio" class="btn-check" name="viewType" id="monthView" value="month" checked>
                                <label class="btn btn-outline-primary" for="monthView">Month</label>
                                
                                <input type="radio" class="btn-check" name="viewType" id="weekView" value="week">
                                <label class="btn btn-outline-primary" for="weekView">Week</label>
                                
                                <input type="radio" class="btn-check" name="viewType" id="dayView" value="day">
                                <label class="btn btn-outline-primary" for="dayView">Day</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Calendar Navigation -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h4 id="currentMonthYear" class="mb-0">January 2024</h4>
                    </div>
                    <div class="btn-group">
                        <button class="btn btn-outline-secondary" onclick="navigateMonth(-1)">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <button class="btn btn-outline-secondary" onclick="goToToday()">
                            Today
                        </button>
                        <button class="btn btn-outline-secondary" onclick="navigateMonth(1)">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Calendar -->
        <div class="card">
            <div class="card-body">
                <div id="calendarContainer">
                    <!-- Calendar will be loaded here -->
                </div>
            </div>
        </div>

        <!-- Legend -->
        <div class="card mt-4">
            <div class="card-body">
                <h6>Legend</h6>
                <div class="row">
                    <div class="col-md-3">
                        <div class="d-flex align-items-center">
                            <div class="calendar-day available me-2" style="width: 30px; height: 20px;"></div>
                            <span>Available</span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="d-flex align-items-center">
                            <div class="calendar-day blocked me-2" style="width: 30px; height: 20px;"></div>
                            <span>Blocked/Booked</span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="d-flex align-items-center">
                            <div class="calendar-day today me-2" style="width: 30px; height: 20px;"></div>
                            <span>Today</span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="d-flex align-items-center">
                            <div class="calendar-day selected me-2" style="width: 30px; height: 20px;"></div>
                            <span>Selected</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Date Details Modal -->
    <div class="modal fade" id="dateDetailsModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Date Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="dateDetailsContent">
                    <!-- Date details will be loaded here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="updateDateDetails()">Update</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bulk Update Modal -->
    <div class="modal fade" id="bulkUpdateModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bulk Update Calendar</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="bulkUpdateForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="startDate" class="form-label">Start Date</label>
                                    <input type="date" class="form-control" id="startDate" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="endDate" class="form-label">End Date</label>
                                    <input type="date" class="form-control" id="endDate" required>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="availability" class="form-label">Availability</label>
                                    <select class="form-select" id="availability">
                                        <option value="available">Available</option>
                                        <option value="blocked">Blocked</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="price" class="form-label">Price (EGP)</label>
                                    <input type="number" class="form-control" id="price" min="0" step="0.01">
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="reason" class="form-label">Reason (Optional)</label>
                            <textarea class="form-control" id="reason" rows="3" placeholder="Enter reason for bulk update..."></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="confirmBulkUpdate()">Apply Update</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let currentDate = new Date();
        let selectedProperty = null;
        let selectedDates = [];

        // Load initial data
        document.addEventListener('DOMContentLoaded', function() {
            loadProperties();
        });

        // Load properties for selector
        async function loadProperties() {
            try {
                const response = await fetch('/api/properties/admin');
                const data = await response.json();
                
                if (data.success) {
                    const select = document.getElementById('propertySelect');
                    select.innerHTML = '<option value="">Choose a property...</option>';
                    
                    data.properties.forEach(property => {
                        const option = document.createElement('option');
                        option.value = property._id;
                        option.textContent = property.title;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading properties:', error);
            }
        }

        // Load property calendar
        async function loadPropertyCalendar() {
            const propertyId = document.getElementById('propertySelect').value;
            if (!propertyId) {
                document.getElementById('calendarContainer').innerHTML = '<p class="text-center text-muted">Please select a property to view its calendar.</p>';
                return;
            }

            selectedProperty = propertyId;
            await generateCalendar();
        }

        // Generate calendar
        async function generateCalendar() {
            if (!selectedProperty) return;

            try {
                const startDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
                const endDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);

                const response = await fetch('/api/bookings/availability', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        propertyId: selectedProperty,
                        startDate: startDate.toISOString(),
                        endDate: endDate.toISOString()
                    })
                });

                const data = await response.json();
                
                if (data.success) {
                    displayCalendar(data.availability);
                }
            } catch (error) {
                console.error('Error loading calendar:', error);
            }
        }

        // Display calendar
        function displayCalendar(availability) {
            const container = document.getElementById('calendarContainer');
            const monthName = currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
            document.getElementById('currentMonthYear').textContent = monthName;

            // Get first day of month and number of days
            const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
            const daysInMonth = lastDay.getDate();
            const startingDayOfWeek = firstDay.getDay();

            let calendarHTML = `
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th class="text-center">Sun</th>
                                <th class="text-center">Mon</th>
                                <th class="text-center">Tue</th>
                                <th class="text-center">Wed</th>
                                <th class="text-center">Thu</th>
                                <th class="text-center">Fri</th>
                                <th class="text-center">Sat</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            // Generate calendar rows
            let currentWeek = [];
            
            // Add empty cells for days before the first day of the month
            for (let i = 0; i < startingDayOfWeek; i++) {
                currentWeek.push('<td class="calendar-day"></td>');
            }

            // Add days of the month
            for (let day = 1; day <= daysInMonth; day++) {
                const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
                const dateString = date.toISOString().split('T')[0];
                const isToday = date.toDateString() === new Date().toDateString();
                
                // Find availability data for this date
                const dateData = availability.dates.find(d => d.date === dateString);
                const isAvailable = dateData ? dateData.available : true;
                const price = dateData ? dateData.price : 0;
                const bookingId = dateData ? dateData.bookingId : null;

                let dayClasses = 'calendar-day';
                if (isAvailable) dayClasses += ' available';
                if (!isAvailable) dayClasses += ' blocked';
                if (isToday) dayClasses += ' today';

                let dayContent = `
                    <div class="d-flex justify-content-between align-items-start">
                        <span class="fw-bold">${day}</span>
                        ${price > 0 ? `<span class="price-tag">${price} EGP</span>` : ''}
                    </div>
                `;

                if (bookingId) {
                    dayContent += `<div class="booking-info text-danger">Booked</div>`;
                }

                currentWeek.push(`
                    <td class="${dayClasses}" onclick="showDateDetails('${dateString}', ${isAvailable}, ${price}, '${bookingId || ''}')">
                        ${dayContent}
                    </td>
                `);

                // Start new week if we have 7 days
                if (currentWeek.length === 7) {
                    calendarHTML += `<tr>${currentWeek.join('')}</tr>`;
                    currentWeek = [];
                }
            }

            // Add remaining empty cells for the last week
            while (currentWeek.length < 7) {
                currentWeek.push('<td class="calendar-day"></td>');
            }
            if (currentWeek.length > 0) {
                calendarHTML += `<tr>${currentWeek.join('')}</tr>`;
            }

            calendarHTML += `
                        </tbody>
                    </table>
                </div>
            `;

            container.innerHTML = calendarHTML;
        }

        // Navigate month
        function navigateMonth(direction) {
            currentDate.setMonth(currentDate.getMonth() + direction);
            generateCalendar();
        }

        // Go to today
        function goToToday() {
            currentDate = new Date();
            generateCalendar();
        }

        // Show date details
        function showDateDetails(dateString, isAvailable, price, bookingId) {
            const content = document.getElementById('dateDetailsContent');
            const date = new Date(dateString);
            const formattedDate = date.toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            });

            content.innerHTML = `
                <div class="mb-3">
                    <h6>${formattedDate}</h6>
                </div>
                <div class="mb-3">
                    <label class="form-label">Availability</label>
                    <select class="form-select" id="dateAvailability">
                        <option value="available" ${isAvailable ? 'selected' : ''}>Available</option>
                        <option value="blocked" ${!isAvailable ? 'selected' : ''}>Blocked</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Price (EGP)</label>
                    <input type="number" class="form-control" id="datePrice" value="${price}" min="0" step="0.01">
                </div>
                ${bookingId ? `
                    <div class="alert alert-info">
                        <strong>Booking ID:</strong> ${bookingId}
                    </div>
                ` : ''}
            `;

            const modal = new bootstrap.Modal(document.getElementById('dateDetailsModal'));
            modal.show();
        }

        // Update date details
        async function updateDateDetails() {
            const dateString = document.querySelector('[onclick*="showDateDetails"]').getAttribute('onclick').split("'")[1];
            const availability = document.getElementById('dateAvailability').value === 'available';
            const price = parseFloat(document.getElementById('datePrice').value) || 0;

            try {
                const response = await fetch('/api/properties/calendar/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        propertyId: selectedProperty,
                        date: dateString,
                        available: availability,
                        price: price
                    })
                });

                const data = await response.json();
                
                if (data.success) {
                    alert('Date updated successfully!');
                    const modal = bootstrap.Modal.getInstance(document.getElementById('dateDetailsModal'));
                    modal.hide();
                    generateCalendar();
                } else {
                    alert('Error updating date: ' + data.error);
                }
            } catch (error) {
                console.error('Error updating date:', error);
                alert('Error updating date');
            }
        }

        // Show bulk update modal
        function showBulkUpdateModal() {
            if (!selectedProperty) {
                alert('Please select a property first');
                return;
            }

            const modal = new bootstrap.Modal(document.getElementById('bulkUpdateModal'));
            modal.show();
        }

        // Confirm bulk update
        async function confirmBulkUpdate() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const availability = document.getElementById('availability').value === 'available';
            const price = parseFloat(document.getElementById('price').value) || 0;
            const reason = document.getElementById('reason').value;

            if (!startDate || !endDate) {
                alert('Please select start and end dates');
                return;
            }

            try {
                const response = await fetch('/api/properties/calendar/bulk-update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        propertyId: selectedProperty,
                        startDate,
                        endDate,
                        available: availability,
                        price,
                        reason
                    })
                });

                const data = await response.json();
                
                if (data.success) {
                    alert('Bulk update applied successfully!');
                    const modal = bootstrap.Modal.getInstance(document.getElementById('bulkUpdateModal'));
                    modal.hide();
                    generateCalendar();
                } else {
                    alert('Error applying bulk update: ' + data.error);
                }
            } catch (error) {
                console.error('Error applying bulk update:', error);
                alert('Error applying bulk update');
            }
        }

        // Refresh calendar
        function refreshCalendar() {
            if (selectedProperty) {
                generateCalendar();
            }
        }
    </script>
</body>
</html>
